{
    "openapi": "3.1.0",
    "info": {
        "title": "Bitcoin - Event Manager API",
        "description": "Maestro's Bitcoin Event Manager API provides a programmable webhook infrastructure for tracking Bitcoin events like transactions, address activity, and related on-chain changes. It allows developers to configure event managers and attach triggers that define what blockchain events to listen for, delivering relevant data to a specified webhook in real time. This API is ideal for alerting systems, real-time monitoring dashboards, and backend processes that need to react to blockchain state changes.\n\n### Key Features:\n- **Granular Triggers:** Set up address-based triggers for sender, receiver, or transaction events with optional filters for additional precision.\n- **Real-Time Webhook Delivery:** Events are pushed to your provided webhook URL the moment matching transactions are detected.\n- **Structured Logging:** Access detailed logs for each event fired, including payload, status, and webhook response.\n- **Flexible Lifecycle Control:** Fully manage, update, or delete event managers and their triggers via API endpoints.\n\n### Key Benefits for Developers:\nDevelopers can automate transaction monitoring and event handling without running full nodes or maintaining custom indexers. The Event Manager API streamlines webhook setup for Bitcoin applications, enabling responsive, event-driven architectures. Itâ€™s especially valuable for wallet notifications, transaction confirmations, backend synchronization, and building reactive user experiences without polling the chain.",
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "0.5.1"
    },
    "servers": [
        {
            "url": "https://xbt-mainnet.gomaestro-api.org/v0/eventmanager",
            "description": "Bitcoin Mainnet API"
        },
        {
            "url": "https://xbt-testnet.gomaestro-api.org/v0/eventmanager",
            "description": "Bitcoin Testnet API"
        }
    ],
    "paths": {
        "/healthcheck": {
            "get": {
                "tags": ["Health"],
                "summary": "Healthcheck",
                "description": "Healthcheck",
                "operationId": "EventManagerService_Healthcheck",
                "responses": {
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/connect.error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/public.event_manager.v1.HealthcheckResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/triggers": {
            "get": {
                "tags": ["Triggers"],
                "summary": "List Triggers",
                "description": "List all triggers\n\n Returns all individual triggers associated with your event managers.",
                "operationId": "EventManagerService_ListTriggers",
                "responses": {
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/connect.error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/public.event_manager.v1.ListTriggersResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Triggers"],
                "summary": "Create Trigger",
                "description": "Create a new trigger\n\n Adds a trigger to a manager to listen for specific blockchain activity.",
                "operationId": "EventManagerService_CreateTrigger",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/public.event_manager.v1.CreateTriggerRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/connect.error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/public.event_manager.v1.CreateTriggerResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/triggers/{id}": {
            "get": {
                "tags": ["Triggers"],
                "summary": "Get Trigger",
                "description": "Fetch trigger details\n\n Returns metadata and configuration for a specific trigger identified by its unique `id`.",
                "operationId": "EventManagerService_GetTrigger",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "id"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/connect.error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/public.event_manager.v1.GetTriggerResponse"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Triggers"],
                "summary": "Update Trigger",
                "description": "Update a trigger\n\n Allows modification of a trigger's properties identified by its unique `id`.",
                "operationId": "EventManagerService_UpdateTrigger",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "id"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "title": "name"
                                    },
                                    "chain": {
                                        "type": "string",
                                        "examples": ["bitcoin"],
                                        "title": "chain",
                                        "enum": ["bitcoin"],
                                        "description": "Blockchain to listen on (bitcoin)"
                                    },
                                    "network": {
                                        "type": "string",
                                        "examples": ["mainnet"],
                                        "title": "network",
                                        "enum": ["mainnet", "testnet"],
                                        "description": "Network environment to listen on (mainnet)"
                                    },
                                    "type": {
                                        "type": "string",
                                        "examples": ["transaction"],
                                        "title": "type",
                                        "enum": ["transaction"],
                                        "description": "Trigger type, e.g., transaction"
                                    },
                                    "webhook_url": {
                                        "type": "string",
                                        "examples": [
                                            "https://webhook.site/your-endpoint"
                                        ],
                                        "title": "webhook_url",
                                        "format": "uri",
                                        "description": "Webhook URL to receive events"
                                    },
                                    "filters": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/public.event_manager.v1.Filter"
                                        },
                                        "title": "filters"
                                    },
                                    "confirmations": {
                                        "type": "integer",
                                        "examples": ["5"],
                                        "title": "confirmations",
                                        "format": "int32",
                                        "description": "Number of confirmations required for the transaction to be matched by this trigger"
                                    },
                                    "status": {
                                        "type": "string",
                                        "examples": ["active"],
                                        "title": "status",
                                        "enum": ["active", "paused"],
                                        "description": "Status of the trigger, either active or inactive"
                                    }
                                },
                                "title": "UpdateTriggerRequest",
                                "additionalProperties": false
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/connect.error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/public.event_manager.v1.UpdateTriggerResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Triggers"],
                "summary": "Delete Trigger",
                "description": "Remove a trigger\n\n Deletes a specific trigger identified by its unique `id`, leaving the event manager intact.",
                "operationId": "EventManagerService_DeleteTrigger",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "id"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/connect.error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/public.event_manager.v1.DeleteTriggerResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/triggers/trigger-condition-options": {
            "get": {
                "tags": ["Triggers"],
                "summary": "List Trigger Condition Options",
                "description": "Fetch picklist options by name\n\n Returns a list of picklist options identified by its unique `name`.",
                "operationId": "EventManagerService_GetTriggerConditionOptions",
                "parameters": [
                    {
                        "name": "trigger_type",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "examples": ["transaction"],
                            "title": "trigger_type",
                            "enum": ["transaction"],
                            "description": "Condition key"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/connect.error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/public.event_manager.v1.GetTriggerConditionOptionsResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/logs/{id}": {
            "get": {
                "tags": ["Logs"],
                "summary": "Get Event Log",
                "description": "Fetch a single event log by ID\n\n Returns the payload, status, and response of a specific event log identified by its unique `id`.",
                "operationId": "EventManagerService_GetEventLog",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "id"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/connect.error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/public.event_manager.v1.GetEventLogResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/logs": {
            "get": {
                "tags": ["Logs"],
                "summary": "List Event Logs",
                "description": "Fetch all event logs\n\n Returns a list of event logs that have been generated from event manager triggers. Each log captures a payload, response status, and other metadata.",
                "operationId": "EventManagerService_ListEventLogs",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "examples": ["1"],
                            "title": "page",
                            "minimum": 1,
                            "format": "int32",
                            "description": "Page number for paginated results (starts from 1)"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "examples": ["20"],
                            "title": "limit",
                            "maximum": 100,
                            "minimum": 1,
                            "format": "int32",
                            "description": "Number of items per page"
                        }
                    },
                    {
                        "name": "trigger_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "examples": ["trigger123"],
                            "title": "trigger_id",
                            "description": "Filter logs by trigger ID"
                        }
                    },
                    {
                        "name": "chain",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "examples": ["bitcoin"],
                            "title": "chain",
                            "description": "Filter logs by chain"
                        }
                    },
                    {
                        "name": "network",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "examples": ["mainnet"],
                            "title": "network",
                            "description": "Filter logs by network"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/connect.error"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/public.event_manager.v1.ListEventLogsResponse"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "google.protobuf.NullValue": {
                "type": "string",
                "title": "NullValue",
                "enum": ["NULL_VALUE"],
                "description": "`NullValue` is a singleton enumeration to represent the null value for the\n `Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`."
            },
            "google.protobuf.ListValue": {
                "type": "object",
                "properties": {
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/google.protobuf.Value"
                        },
                        "title": "values",
                        "description": "Repeated field of dynamically typed values."
                    }
                },
                "title": "ListValue",
                "additionalProperties": false,
                "description": "`ListValue` is a wrapper around a repeated field of values.\n\n The JSON representation for `ListValue` is JSON array."
            },
            "google.protobuf.Struct": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "#/components/schemas/google.protobuf.Value"
                },
                "description": "`Struct` represents a structured data value, consisting of fields\n which map to dynamically typed values. In some languages, `Struct`\n might be supported by a native representation. For example, in\n scripting languages like JS a struct is represented as an\n object. The details of that representation are described together\n with the proto support for the language.\n\n The JSON representation for `Struct` is JSON object."
            },
            "google.protobuf.Struct.FieldsEntry": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "title": "key"
                    },
                    "value": {
                        "title": "value",
                        "$ref": "#/components/schemas/google.protobuf.Value"
                    }
                },
                "title": "FieldsEntry",
                "additionalProperties": false
            },
            "google.protobuf.Value": {
                "oneOf": [
                    {
                        "type": "null"
                    },
                    {
                        "type": "number"
                    },
                    {
                        "type": "string"
                    },
                    {
                        "type": "boolean"
                    },
                    {
                        "type": "array"
                    },
                    {
                        "type": "object",
                        "additionalProperties": true
                    }
                ],
                "description": "`Value` represents a dynamically typed value which can be either\n null, a number, a string, a boolean, a recursive struct value, or a\n list of values. A producer of value is expected to set one of these\n variants. Absence of any variant indicates an error.\n\n The JSON representation for `Value` is JSON value."
            },
            "public.event_manager.v1.CreateTriggerRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "name"
                    },
                    "chain": {
                        "type": "string",
                        "examples": ["bitcoin"],
                        "title": "chain",
                        "enum": ["bitcoin"],
                        "description": "Blockchain to listen on (bitcoin)"
                    },
                    "network": {
                        "type": "string",
                        "examples": ["mainnet"],
                        "title": "network",
                        "enum": ["mainnet", "testnet"],
                        "description": "Network environment to listen on (mainnet)"
                    },
                    "type": {
                        "type": "string",
                        "examples": ["transaction"],
                        "title": "type",
                        "enum": ["transaction"],
                        "description": "Trigger type, e.g., transaction"
                    },
                    "webhook_url": {
                        "type": "string",
                        "examples": ["https://webhook.site/your-endpoint"],
                        "title": "webhook_url",
                        "format": "uri",
                        "description": "Webhook URL to receive events"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/public.event_manager.v1.Filter"
                        },
                        "title": "filters"
                    },
                    "confirmations": {
                        "type": "integer",
                        "examples": ["5"],
                        "title": "confirmations",
                        "format": "int32",
                        "description": "Number of confirmations required for the transaction to be matched by this trigger"
                    }
                },
                "title": "CreateTriggerRequest",
                "additionalProperties": false
            },
            "public.event_manager.v1.CreateTriggerResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "title": "data",
                        "$ref": "#/components/schemas/public.event_manager.v1.Trigger"
                    }
                },
                "title": "CreateTriggerResponse",
                "additionalProperties": false
            },
            "public.event_manager.v1.DeleteTriggerRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "id"
                    }
                },
                "title": "DeleteTriggerRequest",
                "additionalProperties": false
            },
            "public.event_manager.v1.DeleteTriggerResponse": {
                "type": "object",
                "title": "DeleteTriggerResponse",
                "additionalProperties": false
            },
            "public.event_manager.v1.EventLog": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "id"
                    },
                    "trigger_id": {
                        "type": "string",
                        "title": "trigger_id"
                    },
                    "payload": {
                        "title": "payload",
                        "$ref": "#/components/schemas/google.protobuf.Struct"
                    },
                    "response": {
                        "type": "string",
                        "title": "response"
                    },
                    "response_status": {
                        "type": "integer",
                        "title": "response_status",
                        "format": "int32"
                    },
                    "status": {
                        "type": "string",
                        "title": "status"
                    }
                },
                "title": "EventLog",
                "additionalProperties": false
            },
            "public.event_manager.v1.Filter": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "examples": ["sender"],
                        "title": "key",
                        "enum": [
                            "sender",
                            "receiver",
                            "sender_or_receiver",
                            "transaction_id",
                            "total_input_volume",
                            "fee",
                            "size",
                            "weight"
                        ],
                        "description": "Condition to match on: sender, receiver, sender_or_receiver (addresses), transaction_id, total_input_volume, fee, size, weight"
                    },
                    "operator": {
                        "type": "string",
                        "examples": ["="],
                        "title": "operator",
                        "enum": ["=", "\u003e", "\u003e=", "\u003c", "\u003c="],
                        "description": "Condition operation: =, \u003e, \u003e=, \u003c, \u003c=. Fields like receiver and transaction_id can only be exact (=)"
                    },
                    "value": {
                        "type": "string",
                        "title": "value"
                    }
                },
                "title": "Filter",
                "additionalProperties": false,
                "description": "For key in [sender, receiver, sender_or_receiver, transaction_id], operator must be '=':\n```\n!(this.key in ['sender', 'receiver', 'sender_or_receiver', 'transaction_id']) || this.operator == '='\n```\n\n"
            },
            "public.event_manager.v1.GetEventLogRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "id"
                    }
                },
                "title": "GetEventLogRequest",
                "additionalProperties": false
            },
            "public.event_manager.v1.GetEventLogResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "title": "data",
                        "$ref": "#/components/schemas/public.event_manager.v1.EventLog"
                    }
                },
                "title": "GetEventLogResponse",
                "additionalProperties": false
            },
            "public.event_manager.v1.GetTriggerConditionOptionsRequest": {
                "type": "object",
                "properties": {
                    "trigger_type": {
                        "type": "string",
                        "examples": ["transaction"],
                        "title": "trigger_type",
                        "enum": ["transaction"],
                        "description": "Condition key"
                    }
                },
                "title": "GetTriggerConditionOptionsRequest",
                "additionalProperties": false
            },
            "public.event_manager.v1.GetTriggerConditionOptionsResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/public.event_manager.v1.TriggerConditionOption"
                        },
                        "title": "data"
                    }
                },
                "title": "GetTriggerConditionOptionsResponse",
                "additionalProperties": false
            },
            "public.event_manager.v1.GetTriggerRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "id"
                    }
                },
                "title": "GetTriggerRequest",
                "additionalProperties": false
            },
            "public.event_manager.v1.GetTriggerResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "title": "data",
                        "$ref": "#/components/schemas/public.event_manager.v1.Trigger"
                    }
                },
                "title": "GetTriggerResponse",
                "additionalProperties": false
            },
            "public.event_manager.v1.HealthcheckRequest": {
                "type": "object",
                "title": "HealthcheckRequest",
                "additionalProperties": false
            },
            "public.event_manager.v1.HealthcheckResponse": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "title": "status"
                    }
                },
                "title": "HealthcheckResponse",
                "additionalProperties": false
            },
            "public.event_manager.v1.ListEventLogsRequest": {
                "type": "object",
                "properties": {
                    "page": {
                        "type": "integer",
                        "examples": ["1"],
                        "title": "page",
                        "minimum": 1,
                        "format": "int32",
                        "description": "Page number for paginated results (starts from 1)"
                    },
                    "limit": {
                        "type": "integer",
                        "examples": ["20"],
                        "title": "limit",
                        "maximum": 100,
                        "minimum": 1,
                        "format": "int32",
                        "description": "Number of items per page"
                    },
                    "trigger_id": {
                        "type": "string",
                        "examples": ["trigger123"],
                        "title": "trigger_id",
                        "description": "Filter logs by trigger ID",
                        "nullable": true
                    },
                    "chain": {
                        "type": "string",
                        "examples": ["bitcoin"],
                        "title": "chain",
                        "description": "Filter logs by chain",
                        "nullable": true
                    },
                    "network": {
                        "type": "string",
                        "examples": ["mainnet"],
                        "title": "network",
                        "description": "Filter logs by network",
                        "nullable": true
                    }
                },
                "title": "ListEventLogsRequest",
                "additionalProperties": false
            },
            "public.event_manager.v1.ListEventLogsResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/public.event_manager.v1.EventLog"
                        },
                        "title": "data"
                    }
                },
                "title": "ListEventLogsResponse",
                "additionalProperties": false
            },
            "public.event_manager.v1.ListTriggersRequest": {
                "type": "object",
                "title": "ListTriggersRequest",
                "additionalProperties": false
            },
            "public.event_manager.v1.ListTriggersResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/public.event_manager.v1.Trigger"
                        },
                        "title": "data"
                    }
                },
                "title": "ListTriggersResponse",
                "additionalProperties": false
            },
            "public.event_manager.v1.Trigger": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "id"
                    },
                    "name": {
                        "type": "string",
                        "title": "name"
                    },
                    "chain": {
                        "type": "string",
                        "examples": ["bitcoin"],
                        "title": "chain",
                        "enum": ["bitcoin"],
                        "description": "Blockchain to listen on (bitcoin)"
                    },
                    "network": {
                        "type": "string",
                        "examples": ["mainnet"],
                        "title": "network",
                        "enum": ["mainnet", "testnet"],
                        "description": "Network environment to listen on (mainnet)"
                    },
                    "type": {
                        "type": "string",
                        "examples": ["transaction"],
                        "title": "type",
                        "enum": ["transaction"],
                        "description": "Trigger type, e.g., transaction"
                    },
                    "webhook_url": {
                        "type": "string",
                        "examples": ["https://webhook.site/your-endpoint"],
                        "title": "webhook_url",
                        "format": "uri",
                        "description": "Webhook URL to receive events"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/public.event_manager.v1.Filter"
                        },
                        "title": "filters"
                    },
                    "status": {
                        "type": "string",
                        "examples": ["active"],
                        "title": "status",
                        "enum": ["active", "paused"],
                        "description": "Status of the trigger, either active or inactive"
                    },
                    "event_count": {
                        "type": ["integer", "string"],
                        "examples": ["40"],
                        "title": "event_count",
                        "format": "int64",
                        "description": "Number of events triggered by this trigger"
                    },
                    "confirmations": {
                        "type": "integer",
                        "examples": ["5"],
                        "title": "confirmations",
                        "format": "int32",
                        "description": "Number of confirmations required for the transaction to be matched by this trigger"
                    }
                },
                "title": "Trigger",
                "additionalProperties": false
            },
            "public.event_manager.v1.TriggerConditionOption": {
                "type": "object",
                "properties": {
                    "trigger_type": {
                        "type": "string",
                        "title": "trigger_type"
                    },
                    "name": {
                        "type": "string",
                        "title": "name"
                    },
                    "display_name": {
                        "type": "string",
                        "title": "display_name"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "title": "values"
                    },
                    "sort_order": {
                        "type": "integer",
                        "title": "sort_order",
                        "format": "int32"
                    }
                },
                "title": "TriggerConditionOption",
                "additionalProperties": false
            },
            "public.event_manager.v1.UpdateTriggerRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "id"
                    },
                    "name": {
                        "type": "string",
                        "title": "name"
                    },
                    "chain": {
                        "type": "string",
                        "examples": ["bitcoin"],
                        "title": "chain",
                        "enum": ["bitcoin"],
                        "description": "Blockchain to listen on (bitcoin)"
                    },
                    "network": {
                        "type": "string",
                        "examples": ["mainnet"],
                        "title": "network",
                        "enum": ["mainnet", "testnet"],
                        "description": "Network environment to listen on (mainnet)"
                    },
                    "type": {
                        "type": "string",
                        "examples": ["transaction"],
                        "title": "type",
                        "enum": ["transaction"],
                        "description": "Trigger type, e.g., transaction"
                    },
                    "webhook_url": {
                        "type": "string",
                        "examples": ["https://webhook.site/your-endpoint"],
                        "title": "webhook_url",
                        "format": "uri",
                        "description": "Webhook URL to receive events"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/public.event_manager.v1.Filter"
                        },
                        "title": "filters"
                    },
                    "confirmations": {
                        "type": "integer",
                        "examples": ["5"],
                        "title": "confirmations",
                        "format": "int32",
                        "description": "Number of confirmations required for the transaction to be matched by this trigger"
                    },
                    "status": {
                        "type": "string",
                        "examples": ["active"],
                        "title": "status",
                        "enum": ["active", "paused"],
                        "description": "Status of the trigger, either active or inactive"
                    }
                },
                "title": "UpdateTriggerRequest",
                "additionalProperties": false
            },
            "public.event_manager.v1.UpdateTriggerResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "title": "data",
                        "$ref": "#/components/schemas/public.event_manager.v1.Trigger"
                    }
                },
                "title": "UpdateTriggerResponse",
                "additionalProperties": false
            },
            "connect-protocol-version": {
                "type": "number",
                "title": "Connect-Protocol-Version",
                "enum": [1],
                "description": "Define the version of the Connect protocol",
                "const": 1
            },
            "connect-timeout-header": {
                "type": "number",
                "title": "Connect-Timeout-Ms",
                "description": "Define the timeout, in ms"
            },
            "connect.error": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "examples": ["not_found"],
                        "enum": [
                            "canceled",
                            "unknown",
                            "invalid_argument",
                            "deadline_exceeded",
                            "not_found",
                            "already_exists",
                            "permission_denied",
                            "resource_exhausted",
                            "failed_precondition",
                            "aborted",
                            "out_of_range",
                            "unimplemented",
                            "internal",
                            "unavailable",
                            "data_loss",
                            "unauthenticated"
                        ],
                        "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
                    },
                    "message": {
                        "type": "string",
                        "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
                    },
                    "detail": {
                        "$ref": "#/components/schemas/google.protobuf.Any"
                    }
                },
                "title": "Connect Error",
                "additionalProperties": true,
                "description": "Error type returned by Connect: https://connectrpc.com/docs/go/errors/#http-representation"
            },
            "google.protobuf.Any": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string",
                        "format": "binary"
                    },
                    "debug": {
                        "type": "object",
                        "additionalProperties": true
                    }
                },
                "additionalProperties": true,
                "description": "Contains an arbitrary serialized message along with a @type that describes the type of the serialized message."
            }
        },
        "securitySchemes": {
            "api-key": {
                "type": "apiKey",
                "name": "api-key",
                "in": "header"
            }
        }
    },
    "security": [
        {
            "api-key": []
        }
    ],
    "tags": [
        {
            "name": "EventManagerService"
        }
    ]
}
